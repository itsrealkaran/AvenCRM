// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum for various statuses
enum UserRole {
  SUPERADMIN
  ADMIN
  TEAM_LEADER
  AGENT
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  NEGOTIATION
  WON
  LOST
  FOLLOWUP
}

enum DealStatus {
  PROSPECT
  ACTIVE
  UNDER_CONTRACT
  CLOSED_WON
  CLOSED_LOST
}

enum TransactionType {
  INCOME
  EXPENSE
  SUBSCRIPTION
  COMMISSION
}

enum PlanTier {
  BASIC
  PROFESSIONAL
  ENTERPRISE
  CUSTOM
}

enum EventType {
  MEETING
  CALL
  PROPERTY_VIEWING
  FOLLOW_UP
  INTERNAL_MEETING
  CLIENT_MEETING
}

enum EmailCampaignStatus {
  DRAFT
  SCHEDULED
  SENDING
  COMPLETED
  FAILED
}

enum Gender {
  MALE
  FEMALE
  OTHERS
}

enum EmailStatus {
  PENDING
  SENT
  FAILED
  SCHEDULED
}

enum EmailProvider {
  GMAIL
  OUTLOOK
}

// Superuser/Platform Company Model
model SuperAdmin {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt

  AdminAccessToken AdminAccessToken[]

  AdminLoginLog AdminLoginLog[]
}

// Company Model
model Company {
  id           String   @id @default(cuid())
  name         String
  email        String   @unique
  size         Int?
  
  // Subscription details
  plan         Plan     @relation(fields: [planId], references: [id])
  planId       String
  planStart   DateTime @default(now())
  planEnd     DateTime
  
  // Detailed company information
  address      String?
  phone        String?
  website      String?
  
  // Relations
  admin        Admin    @relation(fields: [adminId], references: [id])
  adminId      String   @unique
  
  users        Agent[]
  leads        Lead[]
  deals        Deal[]
  transactions Transaction[]
  teams        Team[]
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime? @updatedAt

  EmailCampaign EmailCampaign[]

  CompanyAuditLog CompanyAuditLog[]
 
  EmailTemplates EmailTemplate[]
}

// Plan Model for different subscription tiers
model Plan {
  id           String     @id @default(cuid())
  name         PlanTier   @default(BASIC)
  price        Float
  maxUsers     Int
  features     Json?
  
  companies    Company[]
  
  createdAt    DateTime   @default(now())
  updatedAt    DateTime?   @updatedAt
}

// Admin Model
model Admin {
  id           String     @id @default(cuid())
  name         String
  email        String     @unique
  password     String
  designation  String?
  
  // Relation to Company
  company      Company?
  
  supportTickets SupportTicket[]
  
  lastLogin   DateTime?
  
  createdAt   DateTime   @default(now())
  updatedAt   DateTime?   @updatedAt

  PageBuilder PageBuilder[] @relation("AllowedAdmins")
}

// Team Model
model Team {
  id           String     @id @default(cuid())
  name         String
  description  String?
  
  // Relations
  company      Company    @relation(fields: [companyId], references: [id])
  companyId    String
  
  teamLeader   Agent?     @relation("TeamLeadership", fields: [teamLeaderId], references: [id])
  teamLeaderId String      @unique
  
  members      Agent[]    @relation("TeamMembers")
  createdAt    DateTime   @default(now())
  updatedAt    DateTime?   @updatedAt
}

// Agent/User Model
model Agent {
  id           String     @id @default(cuid())
  name         String
  email        String     @unique
  password     String
  phone        String?
  gender       Gender
  dob          DateTime?
  
  // Relations
  company      Company    @relation(fields: [companyId], references: [id])
  companyId    String
  
  // Team Relations
  team         Team?      @relation("TeamMembers", fields: [teamId], references: [id])
  teamId       String?
  
  // Leadership of Team (optional)
  leadingTeam  Team?      @relation("TeamLeadership")
  
  // Other Relations
  leads        Lead[]
  deals        Deal[]
  
  role        UserRole   @default(AGENT)
  lastLogin   DateTime?
  
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  Property Property[]
  PageBuilder PageBuilder[]

  Transaction Transaction[]

  EmailTemplates EmailTemplate[]

  EmailCampaign EmailCampaign[]

  EmailAccount EmailAccount[]
}

// Lead Model
model Lead {
  id             String      @id @default(cuid())
  name           String
  email          String?
  phone          String?
  
  // Company Relation
  company        Company     @relation(fields: [companyId], references: [id])
  companyId      String
  
  // Agent Relation
  agent          Agent       @relation(fields: [agentId], references: [id])
  agentId        String
  
  // Lead Details
  leadAmount     Float?
  source         String?     @default("MANUAL")
  status         LeadStatus  @default(NEW)
  
  // Property/Contact Details
  propertyType   String?
  budget         Float?
  location       String?
  
  // Timing and Expectations
  expectedDate   DateTime?
  lastContactDate DateTime?
  
  // Additional Details
  notes          String?
  socialProfiles Json?

  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime?    @updatedAt
}

// Deal Model
model Deal {
  id             String      @id @default(cuid())
  name           String
  email          String?
  phone          String?
  
  // Relations
  company        Company     @relation(fields: [companyId], references: [id])
  companyId      String
  
  agent          Agent       @relation(fields: [agentId], references: [id])
  agentId        String
  
  // Deal Specifics
  dealAmount     Float
  status         DealStatus  @default(PROSPECT)
  
  // Property Details
  propertyType   String?
  propertyAddress String?
  propertyValue  Float?
  
  // Timeline
  expectedCloseDate DateTime?
  actualCloseDate   DateTime?
  
  // Commission and Financial
  commissionRate Float?
  estimatedCommission Float?
  
  // Additional Details
  notes          String?
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

//  Model
model Transaction {
  id             String      @id @default(cuid())
  
  // Relations
  company        Company     @relation(fields: [companyId], references: [id])
  companyId      String
  
  // Tranasctions Details
  amount         Float
  date           DateTime    @default(now())
  type           TransactionType
  agent          Agent       @relation(fields: [agentId], references: [id])
  agentId        String

  planType       PlanTier?
  isVerfied      Boolean     @default(false)
  
  // Invoice and Billing
  invoiceNumber  String?
  taxRate        Float?
  totalAmount    Float?
  
  // Additional Financial Info
  transactionMethod  String?
  receiptUrl     String?
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

// Support Ticket Model
model SupportTicket {
  id             String      @id @default(cuid())
  
  // Relations
  createdBy      Admin?      @relation(fields: [createdById], references: [id])
  createdById    String?

  // Ticket Details
  title          String
  description    String
  status         String      @default("OPEN")
  priority       String      @default("MEDIUM")
  
  // Tagging and Assignment
  assignedTo     String?
  tags           String[]
  
  // Communication Thread
  comments       TicketComment[]
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

// Ticket Comment Model for Internal Communication
model TicketComment {
  id             String      @id @default(cuid())
  
  ticket         SupportTicket @relation(fields: [ticketId], references: [id])
  ticketId       String
  
  content        String
  createdBy      String
  
  createdAt     DateTime    @default(now())
}

model CalendarEvent {
  id                 String               @id @default(cuid())
  
  // Event Details
  title              String
  description        String?
  start             DateTime
  end               DateTime
  
  setterId           String
  
  // Audit
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
}

// Comprehensive Audit Logging
model CompanyAuditLog {
  id                 String               @id @default(cuid())
  
  company            Company              @relation(fields: [companyId], references: [id])
  companyId          String
  
  // Detailed Audit Information
  action             String
  entityType         String
  entityId           String
  performedBy        String
  
  // Additional Context
  details            Json?
  
  createdAt          DateTime             @default(now())
}

// Administrative Access Token Management
model AdminAccessToken {
  id                 String               @id @default(cuid())
  
  superAdmin         SuperAdmin           @relation(fields: [superAdminId], references: [id])
  superAdminId       String
  
  // Token Details
  token              String               @unique
  expiresAt          DateTime
  isRevoked          Boolean              @default(false)
  
  createdAt          DateTime             @default(now())
}

// Login Tracking for Security
model AdminLoginLog {
  id                 String               @id @default(cuid())
  
  superAdmin         SuperAdmin           @relation(fields: [superAdminId], references: [id])
  superAdminId       String
  
  // Login Details
  ipAddress          String
  userAgent          String?
  loginTime          DateTime             @default(now())
  isSuccessful       Boolean
}

model Property {
  id              String   @id @default(cuid())
  title           String
  description     String
  price           Float
  address         String
  sqft            Int
  bedrooms        Int?
  
  propertySummary Json
  bathrooms       Json
  interiorFeatures Json
  buildingFeatures Json
  heatingNcooling Json
  exteriorFeatures Json
  measurements    Json
  parking Json
  lotFeatures     Json
  rooms           Json[]
  images          String[] // URLs of property images

  // Created and updated timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

// Relationships
  createdBy       Agent?   @relation(fields: [creatorId], references: [id])
  creatorId       String?
}

// Email Campaign
model EmailCampaign {
  id                 String               @id @default(cuid())
  
  // Campaign Details
  title              String
  subject            String
  content            String @db.Text
  
  // Relationships
  company            Company              @relation(fields: [companyId], references: [id])
  companyId          String
  createdBy          Agent                @relation(fields: [createdById], references: [id])
  createdById        String
  
  // Campaign Tracking
  status             EmailCampaignStatus  @default(DRAFT)
  scheduledAt        DateTime?
  sentAt             DateTime?
  completedAt        DateTime?
  
  // Analytics
  totalRecipients    Int                  @default(0)
  successfulSends    Int                    @default(0)
  failedSends        Int                  @default(0)
  
  // Recipient Management
  recipients         Json
  templateId         String?              // Reference to template if used
  
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt

  Email Email[]
}

// Email Account Integration
model EmailAccount {
  id            String        @id @default(cuid())
  email         String
  accessToken   String
  refreshToken  String
  expiresAt     DateTime
  isActive      Boolean       @default(true)

  provider      EmailProvider

  // Relations
  user          Agent         @relation(fields: [userId], references: [id])
  userId        String

  sentEmails    Email[]

  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

// Email Model
model Email {
  id              String          @id @default(cuid())
  subject         String
  body            String          @db.Text
  scheduledFor    DateTime?
  sentAt          DateTime?
  status          EmailStatus     @default(PENDING)
  error           String?         @db.Text
  
  // Relations
  sender          EmailAccount    @relation(fields: [emailAccountId], references: [id])
  emailAccountId  String
  
  campaign        EmailCampaign?  @relation(fields: [campaignId], references: [id])
  campaignId      String?
  
  // Recipients
  recipients      Json

  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@index([campaignId])
  @@index([emailAccountId])
  @@index([status])
}

model EmailTemplate {
  id          String   @id @default(cuid())
  name        String
  subject     String
  content     String   @db.Text
  variables   String[] // Array of variable names used in template
  company     Company  @relation(fields: [companyId], references: [id])
  companyId   String
  createdBy   Agent     @relation(fields: [createdById], references: [id])
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PageBuilder {
  id              String   @id @default(cuid())
  title           String
  content         Json     // JSON containing text, designs, image references, etc.
  isPublic        Boolean  @default(false) // Privacy setting: public/private

  // Created and updated timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relationships
  createdBy       Agent    @relation(fields: [createdById], references: [id])
  createdById     String
  allowedAdmins   Admin[]  @relation("AllowedAdmins")
}